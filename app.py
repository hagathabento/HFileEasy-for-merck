"""
HFileEasy - Hagatha PDF Creator
===============================
Servidor Flask simples para servir a aplica√ß√£o frontend de cria√ß√£o de PDFs.
Este servidor apenas serve os arquivos est√°ticos (HTML, CSS, JS) e n√£o processa PDFs.
O processamento √© feito totalmente no navegador usando JavaScript.

Autor: Hagatha Pereira
Data: 2025
"""

# ===== IMPORTA√á√ïES =====
from flask import Flask, send_from_directory, render_template_string
import os

# ===== CONFIGURA√á√ÉO DA APLICA√á√ÉO FLASK =====
app = Flask(__name__)

# ===== ROTAS DO SERVIDOR =====

@app.route('/')
def index():
    """
    Rota principal - Serve o arquivo index.html
    Esta √© a p√°gina inicial da aplica√ß√£o HFileEasy
    Quando o usu√°rio acessa o servidor na raiz (/), retorna o arquivo principal
    """
    return send_from_directory('.', 'index.html')

@app.route('/<path:filename>')
def serve_static(filename):
    """
    Rota para servir arquivos est√°ticos
    Serve todos os outros arquivos (CSS, JS, imagens) necess√°rios para a aplica√ß√£o
    
    Args:
        filename (str): Nome do arquivo a ser servido (ex: styles.css, script.js, merck.jpeg)
    
    Returns:
        File: Arquivo solicitado do diret√≥rio atual
        
    Exemplos de arquivos servidos:
    - styles.css (estilos da aplica√ß√£o)
    - script.js (funcionalidades JavaScript)
    - merck.jpeg (logo da empresa)
    - sw.js (service worker para funcionalidade offline)
    """
    return send_from_directory('.', filename)

@app.route('/healthcheck')
def healthcheck():
    """
    Endpoint de verifica√ß√£o de sa√∫de do servidor
    Usado para verificar se o servidor est√° funcionando corretamente
    √ötil para monitoramento e deploy automatizado
    
    Returns:
        dict: JSON com status e mensagem do servidor
    """
    return {"status": "ok", "message": "HFileEasy server running"}

# ===== INICIALIZA√á√ÉO DO SERVIDOR =====
if __name__ == '__main__':
    # Mensagens informativas de inicializa√ß√£o
    print("üå∏ Iniciando HFileEasy - Hagatha PDF Creator")
    print("üîó Acesse: http://localhost:5005")
    print("üìù Aplica√ß√£o totalmente frontend rodando com Flask")
    
    # Inicia o servidor Flask com as seguintes configura√ß√µes:
    # debug=True: Habilita modo de debug para desenvolvimento (reinicia automaticamente)
    # host='0.0.0.0': Permite acesso de qualquer IP (n√£o apenas localhost)
    # port=5005: Define a porta 5005 para o servidor
    app.run(debug=True, host='0.0.0.0', port=5005) 




    #feito de forma simples usando flask , mas facil de implementar em qualquer servidor